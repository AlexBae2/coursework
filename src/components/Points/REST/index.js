import React from "react";
import RestImg from "../../../assets/images/restApi.jpeg"
import RestApiStreamingApi from "../../../assets/images/restApiStreamingApi.png"

const Rest = () => {
    return (
        <div>
            <h2>Архитектура REST сервисов</h2>
            <p>REST (Representational State Transfer) является архитектурным стилем, который определяет принципы проектирования веб-сервисов. Он обеспечивает простоту, масштабируемость, надежность и расширяемость. Вот основные принципы архитектуры REST:</p>
            <img src={RestImg} width={600}/>
            <img src={RestApiStreamingApi} width={600}/>
            <ol>
                <li>
                    <h3>Ресурсы</h3>
                    <p>REST ориентирован на работу с ресурсами, которые являются основными сущностями в системе. Ресурсы представляются через уникальные идентификаторы (URL). Каждый ресурс имеет своё представление, доступное через различные форматы (например, JSON, XML).</p>
                </li>
                <li>
                    <h3>HTTP методы</h3>
                    <p>REST использует HTTP методы для взаимодействия с ресурсами. Наиболее часто используемые методы:</p>
                    <ul>
                        <li><strong>GET:</strong> Получение данных ресурса.</li>
                        <li><strong>POST:</strong> Создание нового ресурса.</li>
                        <li><strong>PUT:</strong> Обновление существующего ресурса.</li>
                        <li><strong>DELETE:</strong> Удаление ресурса.</li>
                    </ul>
                </li>
                <li>
                    <h3>Гипермедиа</h3>
                    <p>REST поддерживает использование гипермедиа для связи между клиентом и сервером. Гипермедиа включает ссылки на связанные ресурсы, что позволяет клиенту исследовать и получать доступ к связанным данным и функциональности.</p>
                </li>
                <li>
                    <h3>Безсостоятельность</h3>
                    <p>REST не сохраняет состояние между запросами клиента. Клиент должен включать все необходимые данные в каждом запросе для обработки сервером. Сервер не хранит состояние клиента между запросами.</p>
                </li>
                <li>
                    <h3>Кеширование</h3>
                    <p>REST поддерживает кеширование для улучшения производительности и снижения нагрузки на сервер. Клиенты могут кэшировать полученные данные и повторно использовать их при необходимости.</p>
                </li>
                <li>
                    <h3>Единообразие интерфейса</h3>
                    <p>REST стандартизирует интерфейс взаимодействия между клиентом и сервером. Это позволяет клиентам быть независимыми от конкретных реализаций серверов и облегчает взаимодействие с различными REST-сервисами.</p>
                </li>
            </ol>

        </div>
    )
};

export default Rest;