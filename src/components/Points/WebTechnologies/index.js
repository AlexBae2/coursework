import React from "react";
import balanceDB from "../../../assets/images/balanceDB.png"
import balanceDGif from "../../../assets/images/balanceDb.gif"
import Horizont from "../../../assets/images/horizont.png"
import Async from "../../../assets/images/async.png"
import Restore from "../../../assets/images/restore.png"

const WebTechnologies = () => {
    return (
        <div>
            <h2>Подходы к обеспечению высокой производительности и надежности Web-приложений</h2>
            <p>В современном мире производительность и надежность Web-приложений являются одними из главных аспектов, на
                которые обращают внимание разработчики. Без надежности и быстрой производительности приложения не смогут
                удовлетворить потребности пользователей и конкурировать на рынке. В этом разделе рассмотрим подходы к
                обеспечению высокой производительности и надежности Web-приложений.
            </p>
            <h3>1. Резервирование серверов</h3>
            <p>Резервирование серверов является важным аспектом обеспечения надежности веб-приложений. Это позволяет создать резервные копии серверов, которые могут использоваться в случае отказа основных серверов. Резервирование серверов включает:</p>
            <ul>
                <li>Использование резервных серверов, которые готовы принять нагрузку в случае выхода из строя основных серверов.</li>
                <li>Репликацию данных, чтобы обеспечить доступность информации и избежать потери данных в случае сбоя.</li>
            </ul>
            <h3>2. Кэширование</h3>
            <p>Кэширование помогает увеличить производительность веб-приложений путем временного хранения результатов вычислений или запросов. Кэширование включает:</p>
            <ul>
                <li>Использование клиентского браузера для хранения временных копий данных, которые могут быть повторно использованы без обращения к серверу.</li>
                <li>Использование прокси-серверов или серверов приложений для кеширования данных и ускорения обработки запросов.</li>
            </ul>
            <h3>3. Балансировка нагрузки</h3>
            <p>Балансировка нагрузки позволяет равномерно распределять запросы между несколькими серверами для достижения высокой доступности и увеличения производительности. Это включает:</p>
            <ul>
                <li>Использование аппаратных или программных балансировщиков нагрузки для распределения запросов на наиболее подходящие серверы.</li>
                <li>Анализ запросов и перенаправление их на серверы с наименьшей загрузкой для равномерного распределения нагрузки.</li>
                <p><strong>Пример простейшей балансировки нагрузок циклическим перебором.</strong></p>
                <img src={balanceDGif} alt={'Пример балансировки нагрузки'} />
                <img src={balanceDB} alt={'Пример балансировки нагрузки'} width={600}/>
            </ul>
            <h3>4. Масштабирование приложений</h3>
            <p>Масштабирование приложений позволяет обеспечить высокую производительность и надежность путем увеличения вычислительных ресурсов. Это включает:</p>
            <ul>
                <li>Масштабирование вертикально путем увеличения ресурсов на одной физической машине, таких как процессор, память или дисковое пространство.</li>
                <li>Масштабирование горизонтально путем добавления дополнительных физических или виртуальных машин для распределения нагрузки.</li>
            </ul>
            <img src={Horizont} alt={'Пример масштабирование приложений'} width={600}/>
            <h3>5. Оптимизация БД</h3>
            <p>Оптимизация базы данных (БД) является важным шагом для обеспечения производительности и надежности веб-приложений, работающих с БД. Это включает:</p>
            <ul>
                <li>Индексирование таблиц и запросов для ускорения доступа к данным.</li>
                <li>Оптимизацию структуры БД и запросов для минимизации нагрузки на сервер.</li>
            </ul>
            <h3>6. Асинхронная обработка</h3>
            <p>Асинхронная обработка позволяет выполнять операции параллельно и не блокировать основной поток выполнения. Это включает:</p>
            <ul>
                <li>Использование асинхронных запросов для параллельного выполнения операций без ожидания завершения каждой операции.</li>
                <li>Использование очередей задач для асинхронной обработки длительных операций или операций, требующих большого количества ресурсов.</li>
            </ul>
            <img src={Async} alt={'Пример масштабирование приложений'} width={600}/>
            <h3>7. Резервное копирование и восстановление</h3>
            <p>Резервное копирование и восстановление важно для обеспечения надежности и защиты данных. Это включает:</p>
            <ul>
                <li>Регулярное создание резервных копий данных приложения.</li>
                <li>Тестирование процедур восстановления данных для проверки их работоспособности.</li>
            </ul>
            <img src={Restore} alt={'Пример масштабирование приложений'} width={600}/>

            <h3>8. Мониторинг и масштабирование инфраструктуры</h3>
            <p>Мониторинг и масштабирование инфраструктуры помогают обнаруживать проблемы производительности и надежности и принимать меры для их решения. Это включает:</p>
            <ul>
                <li>Использование инструментов мониторинга для отслеживания загрузки серверов, использования ресурсов и производительности приложения.</li>
                <li>Масштабирование инфраструктуры путем добавления новых серверов или ресурсов в зависимости от нагрузки и потребностей приложения.</li>
            </ul>
            <h3>9. Обеспечение безопасности</h3>
            <p>Обеспечение безопасности веб-приложений играет важную роль в обеспечении надежности и защиты данных. Это включает:</p>
            <ul>
                <li>Использование механизмов аутентификации и авторизации для защиты доступа к приложению и данным.</li>
                <li>Применение мер безопасности, таких как шифрование данных, защита от взлома и предотвращение атак.</li>
            </ul>

        </div>
    )
};

export default WebTechnologies;