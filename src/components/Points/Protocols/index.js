import React from "react";
import webServerArch from '../../../assets/images/webServerArch.png'


const Protocols = () => {
    return (
        <div>
            <h2>Архитектура Web сервера</h2>
            <img style={{backgroundColor:'white'}} src={webServerArch}/>
            <ul>
                <h3>
                    <li>DNS</li>
                </h3>
                <p>DNS, или "Domain Name System" (система доменных имён), является базовой технологией, которая
                    обеспечивает работу интернета. DNS выполняет функцию поиска IP-адреса для доменного имени, позволяя
                    компьютеру отправить запрос на соответствующий сервер. Это подобно использованию телефонной книги
                    для поиска номера телефона.</p>

                <h3>
                    <li>Балансировщик нагрузки</li>
                </h3>
                <p>Балансировщик нагрузки позволяет выполнять горизонтальное масштабирование веб-приложений. Он направляет
                    входящие запросы на разные серверы приложений, которые обрабатывают запросы и отправляют ответы
                    обратно пользователю. Балансировщик нагрузки распределяет задачи между серверами, чтобы нагрузка
                    была равномерно распределена.</p>

                <h3>
                    <li>Серверы веб-приложений</li>
                </h3>
                <p>Серверы веб-приложений выполняют основную бизнес-логику, обрабатывают пользовательские запросы и
                    отправляют HTML обратно браузеру. Они взаимодействуют с другими бэкэнд-инфраструктурами, такими как
                    базы данных, серверы кэширования, очереди заданий и службы поиска. Для реализации сервера приложений
                    необходимо выбрать язык программирования (например, Node.js, Ruby, PHP, Scala, Java, C#, .NET) и
                    соответствующий фреймворк (например, Express для Node.js, Ruby on Rails, Play для Scala, Laravel для
                    PHP и т. д.).</p>

                <h3>
                    <li>
                        Сервер баз данных
                    </li>
                </h3>
                <p>
                    Каждое современное веб-приложение использует одну или несколько баз данных для хранения информации. Базы данных предоставляют инструменты для организации, добавления, поиска, обновления, удаления и выполнения вычислений над данными. В большинстве случаев серверы веб-приложений напрямую общаются с серверами заданий. Кроме того, у каждой серверной службы может быть соответствующая база данных, изолированная от остальной части приложения.

                    Здесь стоит упомянуть SQL и NoSQL.
                    <p>SQL расшифровывается как «Structured Query Language» (язык структурированных запросов). Он был
                        изобретён в 1970-х годах, чтобы создать стандартный способ запросов к реляционным наборам
                        данных, доступных широкой аудитории. SQL-базы данных хранят данные в таблицах, которые связаны
                        между собой общими ключами. Такие ключи обычно представлены целыми числами.</p>
                    <p>NoSQL расшифровывается как «не-SQL» и представляет собой более новый набор технологий баз данных.
                        Он был разработан для обработки очень больших объёмов информации, которые могут генерироваться
                        крупномасштабными веб-приложениями. Большинство вариантов SQL плохо масштабируются
                        горизонтально, а масштабироваться вертикально могут только до определённого момента.</p>
                </p>

                <h3>
                    <li>Кэширование запросов</li>
                </h3>
                <p>
                    Служба кэширования предоставляет простое хранилище данных в формате ключ-значение, которое позволяет хранить и искать информацию за время, близкое к линейному (O(1)). Обычно приложения используют функции кэширования, чтобы сохранять результаты дорогостоящих вычислений и воспользоваться ими позже из кэша, а не пересчитывать их еще раз. Приложение может кэшировать результаты запроса в базы данных, результаты обращения к внешним службам, HTML для заданного URL-адреса и многое другое. Вот некоторые примеры из реального мира:

                    <p>Яндекс кэширует результаты поиска для популярных поисковых запросов, таких как «собака» или
                        «Милые котята», а не ищет их каждый раз заново;</p>
                    <p>Вконтакте кэширует большую часть данных, которые вы видите при входе в систему, например, списки
                        постов или друзей. Подробнее, о технологии кэширования используемого в Facebook, можно почитать
                        в этой статье на Medium;</p>
                    <p>Сайт Pepper.ru кэширует HTML-страницы от React, результаты поиска и т.д.</p>
                </p>

                <h3>
                    <li>Очередь запросов</li>
                </h3>
                <div>
                    <p>Большинству веб-приложений требуется выполнять некоторую работу, напрямую не связанную с ответом
                        на запросы пользователей, асинхронно, в фоновом режиме. Например, Google должен сканировать и
                        индексировать весь интернет, чтобы возвращать релевантные результаты поиска. Он не делает это
                        при каждом запросе, а сканирует сеть асинхронно, обновляя поисковые индексы «по пути».</p>

                    <p>Выполнять асинхронную работу позволяют разные архитектуры, но наиболее распространённой является
                        архитектура «очередь задач». Она состоит из двух компонентов: очереди «заданий», которые
                        необходимо выполнить, и одного или нескольких рабочих серверов (часто называемых «работниками»),
                        которые обрабатывают задания из очереди.</p>

                    <p>В очередях задач хранятся списки заданий, которые нужно выполнить асинхронно. Всякий раз, когда
                        приложению нужно выполнить какую-то задачу, которая должна выполняться по расписанию или в
                        соответствии с действием пользователя, оно добавляет её в очередь. Проще всего организованы
                        очереди FIFO — «первым пришёл — первым ушёл», но большинство приложений в конечном итоге
                        нуждаются в какой-то системе балансировки очередей.</p>
                </div>

                <h3>
                    <li>Службы</li>
                </h3>
                <div>
                    <p>Когда приложение достигает определённого масштаба, как правило, появляются определённые «службы»,
                        созданные специально для запуска в виде отдельных приложений. Они не выставлены на всеобщее
                        обозрение, но приложение и другие службы взаимодействуют с ними. Например, на сайте могут иметься
                        несколько операционных и плановых служб:служба учётных записей, служба контента(хранит метаданные для видео, аудио и изображений), служба оплаты(предоставляет интерфейс для оплаты кредитными картами)</p>
                </div>
                <li><h3>Хранилище данных</h3></li>
                <div>Будет компания жить или нет во многом определяется тем, как она работает с данными. Почти каждое
                    современное приложение, достигая определённого масштаба, переходит к одной и той же организации
                    сбора, хранения и анализа данных. Работа с данными проходит в три основных этапа:
                </div>

                <p>
                    <ol>
                        <li>Приложение отправляет данные в «firehose»-хранилище, которое обеспечивает потоковый
                            интерфейс для
                            поглощения и обработки данных. Как правило, это информация о действиях пользователей. Часто
                            необработанные данные преобразуются или дополняются и передаются в другие
                            «firehose»-хранилища.
                            Наиболее распространённые технологии для этого процесса — AWS Kinesis и Kafka.
                        </li>
                        <li>Исходные, а также окончательно преобразованные и дополненные данные сохраняются в облачном
                            хранилище.
                            AWS Kinesis предлагает сервис под названием Firehose, который позволяет сохранять
                            необработанные
                            данные в облачном хранилище (S3), которое чрезвычайно просто в настройке.
                        </li>
                        <li>Преобразованные и дополненные данные загружаются в хранилище данных для анализа. Типичным
                            примером
                            является AWS Redshift, им пользуется большинство стартапов, хотя крупные компании
                            предпочитают
                            решения от Oracle или другие проприетарные технологии хранения. Если наборы данных
                            достаточно
                            велики, то для анализа может потребоваться технология NoSQL MapReduce, например, Hadoop.
                        </li>
                    </ol>
                </p>
                <h3>
                    <li>Облачное хранилище</li>
                </h3>
                <p>«Облачное хранилище — простой и масштабируемый способ для хранения и обмена данными через интернет».
                    Такое определение дано AWS. Его можно использовать для хранения и доступа к чему угодно, что можно
                    хранить в локальной файловой системе, пользуясь преимуществами RESTful API через HTTP.</p>
            </ul>
        </div>
    )
};

export default Protocols;